/*
 * Copyright (C) 2016  Irotsoma, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
buildscript {
    ext.kotlin_version = '1.0.6'
    repositories {
        mavenCentral()

        //kotlin 1.1 EAP
        maven {url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1'}
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.10"
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

group 'com.irotsoma.cloudbackenc.encryptionservice'
version '0.2-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'

repositories {
    mavenCentral()
    //if the current project is a snapshot then allow using snapshot versions from maven central  Having this as an if prevents accidentally building a release version with snapshot dependencies.
    if (project.version.endsWith('-SNAPSHOT')){
        maven{
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    //kotlin 1.1 EAP
    maven {url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1'}
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.irotsoma.cloudbackenc:common:0.2-SNAPSHOT'
    compile 'com.irotsoma.cloudbackenc.common:encryptionserviceinterface:0.2-SNAPSHOT'
    compile 'org.bouncycastle:bcprov-jdk15on:1.55'
    testCompile 'junit:junit:4.12'

}

apply plugin: 'signing'
def isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion }
    sign configurations.archives
}
if (!isReleaseVersion) {
    configurations.all {
        // check for updates every build
        resolutionStrategy{
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

jar {
    //build a fat jar with dependencies to ease central controller loading resources at runtime
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    //but exclude anything that will already be loaded by the central controller to reduce the file size and chances of
    //version conflicts
    exclude 'kotlin/**', 'com/irotsoma/cloudbackenc/common/**', 'javax/**', 'com/fasterxml/**', "META-INF/*/**"
}

sourceSets {
    main {
        java{
            srcDir 'src/main/kotlin'
        }
        resources {
            srcDir "$buildDir/license-reports/"
        }
    }
}

//javadoc stuff for Kotlin
apply plugin: 'org.jetbrains.dokka'
dokka {
    moduleName = 'data'
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs/javadoc"
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin"
        suffix = "#L"
    }
    sourceDirs = files('src/main/kotlin')
}
task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}
//this section downloads some reports regarding the licenses of various dependencies and includes them in the
// META-INF/licenses folder
apply plugin: 'com.github.hierynomus.license'
license {
    ignoreFailures true
    mapping ('kt', 'JAVADOC_STYLE')
    excludes(['**/*.json', '**/*.properties', '**/LICENSE', '**/*license*.html', '**/*license*.xml', '**/COPYING', '**/COPYING.LESSER', '**/*.dat'])
}
task copyLicenseReports(type: Copy){
    from "$buildDir/reports/license/"
    into "$buildDir/license-reports/META-INF/licenses"
}
assemble.dependsOn 'downloadLicenses'
assemble.dependsOn 'copyLicenseReports'
copyLicenseReports.mustRunAfter 'downloadLicenses'